import os
import re
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiohttp import web

# ==== 1. –ù–ê–°–¢–†–û–ô–ö–ò ====
BOT_TOKEN = os.getenv("BOT_TOKEN")  # —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not BOT_TOKEN:
    BOT_TOKEN = "–í–°–¢–ê–í–¨_–°–Æ–î–ê_–°–í–û–ô_–¢–û–ö–ï–ù"  # –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –≤—Ä—É—á–Ω—É—é

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# ==== 2. –ü–ê–ú–Ø–¢–¨ –î–õ–Ø –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ô ====
warnings = {}

# ==== 3. –°–ü–ò–°–û–ö –ó–ê–ü–†–ï–©–Å–ù–ù–´–• –°–õ–û–í ====
BAD_WORDS = {"–¥—É—Ä–∞–∫", "–∏–¥–∏–æ—Ç", "–ª–æ—Ö", "—Ç—É–ø–æ–π", "–±–ª—è—Ç—å", "—Å—É–∫–∞", "—Ö—É–π", "–ø–∏–¥–æ—Ä"}

# ==== 4. –ö–û–ú–ê–ù–î–´ ====
@dp.message_handler(commands=["start", "help"])
async def start_cmd(message: types.Message):
    await message.reply(
        "üëÆ –ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–¥–µ—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞.\n\n"
        "üß© –ö–æ–º–∞–Ω–¥—ã:\n"
        "/warn ‚Äî –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ\n"
        "/kick ‚Äî –∫–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/ban ‚Äî –∑–∞–±–∞–Ω–∏—Ç—å\n"
        "/unban ‚Äî —Ä–∞–∑–±–∞–Ω–∏—Ç—å\n"
        "–Ø —Ç–∞–∫–∂–µ —Ñ–∏–ª—å—Ç—Ä—É—é –º–∞—Ç –∏ —Å–ø–∞–º."
    )


# ==== 5. –í–´–î–ê–ß–ê –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ô ====
@dp.message_handler(commands=["warn"])
async def warn_user(message: types.Message):
    if not message.reply_to_message:
        return await message.reply("‚ö†Ô∏è –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.")
    user_id = message.reply_to_message.from_user.id
    warnings[user_id] = warnings.get(user_id, 0) + 1
    count = warnings[user_id]

    await message.reply(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {count}/3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{message.reply_to_message.from_user.username or user_id}")

    if count >= 3:
        await message.chat.kick(user_id)
        await message.reply("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è!")
        warnings[user_id] = 0


# ==== 6. –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –§–ò–õ–¨–¢–† ====
@dp.message_handler(lambda m: any(bad in m.text.lower() for bad in BAD_WORDS))
async def bad_word_filter(message: types.Message):
    await message.delete()
    await message.reply(f"üßπ @{message.from_user.username or message.from_user.id}, –±–µ–∑ –º–∞—Ç–∞ –≤ —á–∞—Ç–µ!")
    user_id = message.from_user.id
    warnings[user_id] = warnings.get(user_id, 0) + 1
    if warnings[user_id] >= 3:
        await message.chat.kick(user_id)
        await message.reply(f"üö´ @{message.from_user.username or user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.")
        warnings[user_id] = 0


# ==== 7. –ê–ù–¢–ò–°–ü–ê–ú (—É–¥–∞–ª—è–µ—Ç —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è) ====
user_last_msg = {}

@dp.message_handler()
async def anti_spam(message: types.Message):
    uid = message.from_user.id
    now = message.date.timestamp()
    last = user_last_msg.get(uid, 0)
    user_last_msg[uid] = now

    if now - last < 1.5:  # –º–µ–Ω—å—à–µ 1.5 —Å–µ–∫ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        await message.delete()
        await message.reply("ü§ê –ù–µ —Å–ø–∞–º—å, –±—Ä–∞—Ç!")
        return

# ==== 8. –í–ï–ë-–°–ï–†–í–ï–† –î–õ–Ø RENDER ====
async def handle(request):
    return web.Response(text="Bot is running!")

app = web.Application()
app.add_routes([web.get("/", handle)])

# ==== 9. –ó–ê–ü–£–°–ö ====
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(executor.start_polling(dp, skip_updates=True))
    web.run_app(app, host="0.0.0.0", port=int(os.getenv("PORT", 10000)))

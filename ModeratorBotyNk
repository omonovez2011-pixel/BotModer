import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandObject
from aiogram.enums import ChatMemberStatus

API_TOKEN = "8394599436:AAFbNU2AUz1epCUN76QSVd8GljaSc--Jfi4"

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ –ø–ª–æ—Ö–∏—Ö —Å–ª–æ–≤
BAD_WORDS = ["–ø–∏–¥—Ä", "–º–∞—Ç2", "—Å—É–∫–∞", "—Å–ø–∞–º", "–ø–æ—Ä–Ω–æ", "xxx", "http", "https"]

# –°—á—ë—Ç—á–∏–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
warns = {}

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞, –∞–¥–º–∏–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ---
async def is_admin(message: types.Message):
    member = await bot.get_chat_member(message.chat.id, message.from_user.id)
    return member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]


# --- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ---
@dp.message(F.new_chat_members)
async def greet_new_member(message: types.Message):
    for member in message.new_chat_members:
        await message.reply(f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {member.full_name}!")


# --- –§–∏–ª—å—Ç—Ä –ø–ª–æ—Ö–∏—Ö —Å–ª–æ–≤ –∏ —Å—Å—ã–ª–æ–∫ ---
@dp.message(F.text)
async def filter_bad_words(message: types.Message):
    text = message.text.lower()
    if any(word in text for word in BAD_WORDS):
        await message.delete()

        user_id = message.from_user.id
        warns[user_id] = warns.get(user_id, 0) + 1
        count = warns[user_id]

        if count < 3:
            await message.answer(f"‚ö†Ô∏è {message.from_user.first_name}, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {count}/3.")
        else:
            await message.answer(f"üîá {message.from_user.first_name} –ø–æ–ª—É—á–∏–ª –º—É—Ç –∑–∞ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.")
            await bot.restrict_chat_member(
                message.chat.id, user_id,
                permissions=types.ChatPermissions(can_send_messages=False),
                until_date=int(asyncio.get_event_loop().time()) + 3600  # –º—É—Ç –Ω–∞ 1 —á–∞—Å
            )
            warns[user_id] = 0


# --- –ö–æ–º–∞–Ω–¥–∞ /warn (–¥–ª—è –º–æ–¥–µ—Ä–æ–≤) ---
@dp.message(Command("warn"))
async def warn_user(message: types.Message):
    if not await is_admin(message):
        return await message.reply("üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
    if not message.reply_to_message:
        return await message.reply("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.")

    user = message.reply_to_message.from_user
    warns[user.id] = warns.get(user.id, 0) + 1
    count = warns[user.id]
    await message.answer(f"‚ö†Ô∏è {user.first_name} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {count}/3.")

    if count >= 3:
        await message.answer(f"üîá {user.first_name} –∑–∞–º—å—é—á–µ–Ω –Ω–∞ 1 —á–∞—Å.")
        await bot.restrict_chat_member(
            message.chat.id, user.id,
            permissions=types.ChatPermissions(can_send_messages=False),
            until_date=int(asyncio.get_event_loop().time()) + 3600
        )
        warns[user.id] = 0


# --- –ö–æ–º–∞–Ω–¥–∞ /mute ---
@dp.message(Command("mute"))
async def mute_user(message: types.Message):
    if not await is_admin(message):
        return await message.reply("üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
    if not message.reply_to_message:
        return await message.reply("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∑–∞–º—å—é—Ç–∏—Ç—å.")

    user = message.reply_to_message.from_user
    await bot.restrict_chat_member(
        message.chat.id, user.id,
        permissions=types.ChatPermissions(can_send_messages=False)
    )
    await message.answer(f"üîá {user.first_name} –∑–∞–º—å—é—á–µ–Ω.")


# --- –ö–æ–º–∞–Ω–¥–∞ /unmute ---
@dp.message(Command("unmute"))
async def unmute_user(message: types.Message):
    if not await is_admin(message):
        return await message.reply("üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
    if not message.reply_to_message:
        return await message.reply("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Ä–∞–∑–º—å—é—Ç–∏—Ç—å.")

    user = message.reply_to_message.from_user
    await bot.restrict_chat_member(
        message.chat.id, user.id,
        permissions=types.ChatPermissions(can_send_messages=True)
    )
    await message.answer(f"‚úÖ {user.first_name} —Ä–∞–∑–º—å—é—á–µ–Ω.")


# --- –ö–æ–º–∞–Ω–¥–∞ /ban ---
@dp.message(Command("ban"))
async def ban_user(message: types.Message):
    if not await is_admin(message):
        return await message.reply("üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
    if not message.reply_to_message:
        return await message.reply("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∑–∞–±–∞–Ω–∏—Ç—å.")

    user = message.reply_to_message.from_user
    await bot.ban_chat_member(message.chat.id, user.id)
    await message.answer(f"‚õî {user.first_name} –∑–∞–±–∞–Ω–µ–Ω.")


# --- –ö–æ–º–∞–Ω–¥–∞ /unban ---
@dp.message(Command("unban"))
async def unban_user(message: types.Message):
    if not await is_admin(message):
        return await message.reply("üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
    args = message.text.split()
    if len(args) < 2:
        return await message.reply("–£–∫–∞–∂–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `/unban 123456789`")

    user_id = int(args[1])
    await bot.unban_chat_member(message.chat.id, user_id)
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.")


# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª–µ–¥–∏—Ç –∑–∞ –ø–æ—Ä—è–¥–∫–æ–º...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
